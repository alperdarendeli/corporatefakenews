import numpy as np
import pandas as pd
import tensorflow as tf
import argparse

import utils.metrics
from sklearn.metrics import accuracy_score
from utils.dataset import TCD_Selector

tf.config.set_visible_devices([], 'GPU')
SEED = 0


df_cls = pd.read_csv('utils/cities_mapper_new.csv')
cls2latlong = {k: [v1, v2] for k, v1, v2 in zip(df_cls.class_id_new, df_cls.latitude, df_cls.longitude)}
cls2countryid = {k: v for k, v in zip(df_cls.class_id_new, df_cls.country_id)}


## Define master function to interpret results generated by 04_lstm_test.py

def interpret_results(exp, split):

    res = np.load(f'seeded-{SEED}/results/{exp}/y_dataset_{split}_final-245475.npz')

    y_true_latlong = np.array([cls2latlong[x] for x in res['y_true']])
    y_pred_latlong = np.array([cls2latlong[x] for x in res['y_pred']])
    distances = utils.metrics.get_distance(y_true_latlong, y_pred_latlong)
    _meanED = np.mean(distances)

    country_true = pd.Series(res['y_true']).replace(cls2countryid).to_numpy()
    country_pred = pd.Series(res['y_pred']).replace(cls2countryid).to_numpy()
    _acc1Country = 100 * accuracy_score(country_true, country_pred)

    print(f'| {exp} | {split} | {_meanED:.2f} | {_acc1Country:.2f} |')


if __name__ == '__main__':

    print( interpret_results(f'features_all_lr_1e-3_ndim_100_nlstm_2', 'val') )